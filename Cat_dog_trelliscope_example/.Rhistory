input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = readline(prompt="lanes: ")),
feedback_email = "trivinochris124@gmail.com"
)
)
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 300,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c(1,2,3,4,5)),
feedback_email = "trivinochris124@gmail.com"
)
)
?input_text
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 300,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c(1,2,3,4,5)),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
pok <-
read_csv("https://raw.githubusercontent.com/hafen/pokRdex/master/pokRdex_mod.csv") %>%
mutate_at(vars(matches("_id$")), as.character)
library(tidyverse)
pok <-
read_csv("https://raw.githubusercontent.com/hafen/pokRdex/master/pokRdex_mod.csv") %>%
mutate_at(vars(matches("_id$")), as.character)
view(pok)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 300,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c(1,2,3,4,5)),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 300,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c(1,2,3,4,5)),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 300,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c("1","2","3","4","5")),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 1000,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c("1","2","3","4","5")),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 1000,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c("1","2","3","4","5")),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
input_text(name = "something_cool",
desc = "put something cool in here",
width = 80, height = 4),,
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 1000,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c("1","2","3","4","5")),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
input_text(name = "something_cool",
desc = "put something cool in here",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
#####################################################
# This code manually helps with labeling the test data set. I am not sure how this will work with image folders. That will be the next test I do.
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 6, width = 1000,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c("yes", "no")),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 80, height = 4),
input_radio(name = "lane numbers",
desc = "How many lanes?",
options = c("1","2","3","4","5")),
input_text(name = "Lanes",
desc = "How many lanes?",
width = 80, height = 4),
input_text(name = "something_cool",
desc = "put something cool in here",
width = 80, height = 4),
feedback_email = "trivinochris124@gmail.com"
)
)
qnorm(8,5,2)
pnorm(8,5,2)
pnorm(0,2,3)
pnorm(5,2,3) - pnorm(-5,2,3)
pnorm(5,2,3)
pnorm(5,2,3) - pnorm(-5,2,3)
dbinom(5,2,3)
?pnorm
pnorm(40,sqrt(90 * .4 * (1-.4)))
90 * .4 * (1-.4))
sqrt(90 * .4 * (1-.4))
dnorm(40,sqrt(90 * .4 * (1-.4)))
pnorm(39,sqrt(90 * .4 * (1-.4)))
pnorm(39,sqrt(90 * .4 * (1-.4)))
pnorm(39,90*.4,sqrt(90 * .4 * (1-.4)))
pnorm(39,90*.4,sqrt(90 * .4 * (1-.4)))
pnorm(0,9)
pnorm
pnorm()
?pnorm()
pnorm(0,2,3)
cities <- us.cities
library(tidyverse)
library(maps)
cities <- us.cities
cities %>%
mutate(city = str_sub(name, 1, -4))
?str_sub
us.cities
view(cities)
view(cities1)
cities1 <- cities %>%
mutate(city = str_sub(name, 1, -4))
cities1 <- cities %>% mutate(city = str_sub(name, 1, -4))
view(cities1)
# Use this R-Chunk to load all your libraries!
#install.packages("tidyverse") # run this line once in console to get package
library(tidyverse)
library(nycflights13)
library(knitr)
library(gt)
library(readr)
library(lubridate)
library(stringr)
library(grid)
library(gridExtra)
library(downloader)
library(haven)
library(foreign)
library(textreadr)
library(readxl)
library(ggplot2)
library(directlabels)
library(maps)
library(hrbrthemes)
# Use this R-Chunk to import all your datasets!
ny <- read_csv("https://storybench.org/reinventingtv/abc7ny.csv?raw=true")
cali <- read_csv("https://storybench.org/reinventingtv/kcra.csv?raw=true")
ny$news <- "New york"
cali$news <- "california"
# Use this R-Chunk to clean & wrangle your data!
data <- rbind(ny,cali)
cities <- us.cities
cities1 <- cities %>%
mutate(city = str_sub(name, 1, -4))
cities_list <- cities1$city %>% str_c(collapse = "|") # collapses everything in my cities column and seperates it by a |
data1 <- data %>%
mutate(city = str_extract(data$headline, pattern = cities_list))
data2 <- data1 %>%
filter(!is.na(city)) # the exclamation is saying when want everything that is not an NA value in the city column
fifteen <- data2 %>%
group_by(city) %>%
summarise(count = n()) %>%
slice_max(count, n = 15)
data_month <- data2
data_month <- data_month %>%
separate(datetime, into = c("month"), sep = " ")
data_month <- data_month %>%
group_by(city,month) %>%
summarise(count = n())
top_cities_with_month <- data_month %>%
filter(city %in% fifteen$city)
hout_char <- top_cities_with_month %>%
filter(city == "Houston" | city == "Charlotte")
hout_char$month <- factor(hout_char$month,levels = c("August","September", "October", "November","December", "January"))
hout_char1 <- hout_char %>%
na.omit()
view(top_cities_with_month)
pnorm(-1,2,3)
pnorm(-.5,2,3)
pnorm(0,2,3)
library(tidyverse)
pnorm(0,2,3)
pnorm(5,2,3)
pnorm(-5,2,3)
pnorm(5,2,3) - pnorm(-5,2,3)
devtools::install_github("hafen/trelliscopejs@sheldon")
library(trelliscopejs)
library(ggplot2)
library(gapminder)
library(tidyverse)
qplot(year, lifeExp, data = gapminder) +
xlim(1948, 2011) + ylim(10, 95) + theme_bw() +
facet_trelliscope(~ country + continent,
name = "gapminder_life_expectancy",
desc = "life expectancy vs. year by country using Gapminder data",
nrow = 2, ncol = 3, width = 1000,
inputs = input_cogs(
input_radio(name = "correct",
desc = "Does the data for this panel appear to be correct?",
options = c('0','1','2','3','4','5','6','7','8')),
input_text(name = "comments",
desc = "Comments about the data in this panel",
width = 200, height = 12),
feedback_email = "email@address.com"
)
)
devtools::install_github("hafen/trelliscopejs@sheldon")
library(trelliscopejs)
library(ggplot2)
library(gapminder)
library(tidyverse)
devtools::install_github("hafen/trelliscopejs@sheldon")
library(trelliscopejs)
library(ggplot2)
library(gapminder)
library(tidyverse)
# shows the image path, class label, the new image path, and the panel key.
dat <- read_csv("cat_dog_v2.csv") %>%
mutate(newImagePath = substr(imagePath, 17, 1000000L)) %>%
mutate_at(vars(matches("_id$")), as.character) %>%
mutate(panel = img_panel_local(newImagePath),
panelKey = str_replace_all(imagePath, '[./]', '_'))
setwd("~/TrelliscopeJS/TrelliscopeJS")
devtools::install_github("hafen/trelliscopejs@sheldon")
library(trelliscopejs)
library(ggplot2)
library(gapminder)
library(tidyverse)
# shows the image path, class label, the new image path, and the panel key.
dat <- read_csv("cat_dog_v2.csv") %>%
mutate(newImagePath = substr(imagePath, 17, 1000000L)) %>%
mutate_at(vars(matches("_id$")), as.character) %>%
mutate(panel = img_panel_local(newImagePath),
panelKey = str_replace_all(imagePath, '[./]', '_'))
view(dat)
# load the trelliscope images, and select the correct label.
# after correctly labeling look at bottom right of screen and save the new correct csv file pertaining to the changes you made from correcting the mislabeling.
trelliscope(dat,
name='Animal Images',
path='random_images',
nrow = 3, ncol = 6, width = 1000,
state = list(labels = c("imagePath", "Animal","label")),
inputs = input_cogs(
input_radio(name = "label",
desc = "Is this the right animal?",
options = c('cat','dog')
),
feedback_email = "trivinochris124@gmail.com"
),
)
newlabels <- read_csv("C:\Users\Admin\Documents\TrelliscopeJS\TrelliscopeJS\Animal_Images_2021-12-08(1).csv")
newlabels <- read_csv("Animal_Images_2021-12-08(1).csv")
view(newlabels)
# load the new csv file from the trelliscope package
newlabels <- read_csv('C:/Users/Admin/Downloads/Animal_Images_2021-12-08.csv') %>%
left_join(dat, by='panelKey') %>%
filter(label =="cat") ## filter the new labeled dataset for images labeled "cat"
view(laneImagesDf2)
view(newlabels)
## This creates a folder for the cat images we just filtered for.
dir.create('ex_images') # creating a new folder called "ex_images" where all cat photo's will be stored.
# moves all cat images into the newly created folder from above.
filePathIt <- 1
for (filePath in newlabels$imagePath) {
file.copy(filePath, paste('./ex_images/newImage', filePathIt, '.jpg', sep=''))
filePathIt = filePathIt + 1
}
## This creates a folder for the cat images we just filtered for.
dir.create('ex_images1') # creating a new folder called "ex_images" where all cat photo's will be stored.
# moves all cat images into the newly created folder from above.
filePathIt <- 1
for (filePath in newlabels$imagePath) {
file.copy(filePath, paste('./ex_images/newImage', filePathIt, '.jpg', sep=''))
filePathIt = filePathIt + 1
}
# load the new csv file from the trelliscope package
newlabels <- read_csv('C:/Users/Admin/Downloads/Animal_Images_2021-12-08.csv') %>%
left_join(dat, by='panelKey') %>%
filter(label =="cat") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
## This creates a folder for the cat images we just filtered for.
dir.create('ex_images2') # creating a new folder called "ex_images" where all cat photo's will be stored.
filePathIt = filePathIt + 2
newlabels <- read_csv("Animal_Images_2021-12-08(1).csv")
view(newlabels)
# load the new csv file from the trelliscope package
newlabels <- read_csv('C:/Users/Admin/Downloads/Animal_Images_2021-12-08.csv') %>%
left_join(dat, by='panelKey') %>%
filter(label =="cat") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
# load the new csv file from the trelliscope package
newlabels <- read_csv('C:/Users/Admin/Downloads/Animal_Images_2021-12-08.csv') %>%
left_join(dat, by='panelKey') %>%
filter(label =="dog") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
# load the new csv file from the trelliscope package
newlabels <- newlabels %>%
left_join(dat, by='panelKey') %>%
filter(label =="dog") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
newlabels <- read_csv("Animal_Images_2021-12-08(1).csv")
view(newlabels)
# load the new csv file from the trelliscope package
newlabels <- newlabels %>%
left_join(dat, by='panelKey') %>%
filter(label =="dog") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
## This creates a folder for the cat images we just filtered for.
dir.create('ex_images') # creating a new folder called "ex_images" where all cat photo's will be stored.
# moves all cat images into the newly created folder from above.
filePathIt <- 1
for (filePath in newlabels$imagePath) {
file.copy(filePath, paste('./ex_images/newImage', filePathIt, '.jpg', sep=''))
filePathIt = filePathIt + 1
}
#load the new csv that was created from the trelliscope multiplot above.
newlabeled_dat <- read_csv("Animal_Images_2021-12-08(1).csv")
view(newlabel_dat)
devtools::install_github("hafen/trelliscopejs@sheldon")
library(trelliscopejs)
library(ggplot2)
library(gapminder)
library(tidyverse)
dat <- read_csv("cat_dog_v2.csv") %>%
mutate(newImagePath = substr(imagePath, 17, 1000000L)) %>%
mutate_at(vars(matches("_id$")), as.character) %>%
mutate(panel = img_panel_local(newImagePath),
panelKey = str_replace_all(imagePath, '[./]', '_'))
# load the trelliscope images, and select the correct label for mis-labeled images.
# after correctly labeling look at bottom right of screen and save the new correct csv file pertaining to the changes you made from correcting the mislabeling.
trelliscope(dat,
name='Animal Images',
path='random_images',
nrow = 3, ncol = 6, width = 1000,
state = list(labels = c("imagePath", "Animal","label")),
inputs = input_cogs(
input_radio(name = "label",
desc = "Is this the right animal?",
options = c('cat','dog')
),
feedback_email = "trivinochris124@gmail.com"
),
)
#load the new csv that was created from the trelliscope multiplot above.
newlabeled_dat <- read_csv("C:\Users\Admin\Documents\TrelliscopeJS\TrelliscopeJS\Animal_Images_2021-12-08(2).csv")
#load the new csv that was created from the trelliscope multiplot above.
newlabeled_dat <- read_csv("Animal_Images_2021-12-08(2).csv")
view(newlabel_dat)
view(newlabel_dat)
#load the new csv that was created from the trelliscope multiplot above.
newlabeled_dat <- read_csv("Animal_Images_2021-12-08(2).csv")
view(newlabeled_dat)
# filter the new dataframe we just created for the specified label we would like to create a folder for. (in this case a folder of just dog images)
newlabels <- newlabeled_dat %>%
left_join(dat, by='panelKey') %>%
filter(label =="dog") ## filter the new labeled dataset for images labeled "cat"
view(newlabels)
## This creates a folder for the specified images we just filtered for.
dir.create('ex_images') # creating a new folder called "ex_images" where all of the photo's for the label we just filtered for will be stored.
# moves all cat images into the newly created folder from above.If you want to create multiple folder just create a new folder directory from the the code above with a different name from "ex_images" and then change the code below to use that new directory.
filePathIt <- 1
for (filePath in newlabels$imagePath) {
file.copy(filePath, paste('./ex_images/newImage', filePathIt, '.jpg', sep=''))
filePathIt = filePathIt + 1
}
